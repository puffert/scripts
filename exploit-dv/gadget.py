#!/usr/bin/env python3
import re
import sys
import shutil
import argparse
import tempfile
import subprocess
from pathlib import Path
import multiprocessing
import platform

og_print = print
from rich import print
from rich.tree import Tree
from rich.markup import escape
from ropper import RopperService


class Gadgetizer:
    def __init__(self, files, badbytes, output, arch, color):
        self.arch = arch
        self.color = color
        self.files = files
        self.output = output
        self.badbytes = "".join(
            badbytes
        )  # ropper's badbytes option has to be an instance of str
        self.ropper_svc = self.get_ropper_service()
        self.addresses = set()

    def get_ropper_service(self):
        # not all options need to be given
        options = {
            "color": self.color,
            "badbytes": self.badbytes,
            "type": "rop",
        }  # if gadgets are printed, use detailed output; default: False

        rs = RopperService(options)

        for file in self.files:
            if ":" in file:
                file, base = file.split(":")
                rs.addFile(file, arch=self.arch)
                rs.clearCache()
                rs.setImageBaseFor(name=file, imagebase=int(base, 16))
            else:
                rs.addFile(file, arch=self.arch)
                rs.clearCache()

            rs.loadGadgetsFor(file)

        return rs

    def get_gadgets(self, search_str, quality=1, strict=False):
        gadgets = [
            (f, g)
            for f, g in self.ropper_svc.search(search=search_str, quality=quality)
        ]  # could be memory hog

        if not gadgets and quality < self.ropper_svc.options.inst_count and not strict:
            # attempt highest quality gadget, continue requesting with lower quality until something is returned
            return self.get_gadgets(search_str, quality=quality + 1)

        return gadgets

    def _search_gadget(self, title, search_strs):
        title = f"[bright_yellow]{title}[/bright_yellow] gadgets"
        tree = Tree(title)
        gadget_filter = re.compile(r'ret 0x[0-9a-fA-F]{3,};')  # filter out rets larger than 255

        for search_str in search_strs:
            for file, gadget in self.get_gadgets(search_str):
                if gadget_filter.search(gadget.simpleString()):
                    # not sure how to filter large ret sizes within ropper's search functionality, so doing it here
                    continue
                tree.add(f"{escape(str(gadget)).replace(':', '  #', 1)} :: {file}")
                self.addresses.add(hex(gadget.address))

        return tree

def add_gadgets_to_tree(self, tree):
    zeroize_strs = []
    reg_prefix = "e" if self.arch == "x86" else "r"

    eip_to_esp_strs = [
        f"jmp {reg_prefix}sp;",
        "leave;",
        f"mov {reg_prefix}sp, ???;",
        f"call {reg_prefix}sp;",
    ]

    tree.add(self._search_gadget("write-what-where", ["mov [???], ???;"]))
    tree.add(self._search_gadget("pointer deref", ["mov ???, [???];"]))
    tree.add(
        self._search_gadget(
            "swap register",
            [
                f"mov {reg_prefix}ax, {reg_prefix}bx;", 
                f"xchg {reg_prefix}ax, {reg_prefix}bx;", 
            ]
        )
    )
    tree.add(self._search_gadget("zeroize", zeroize_strs))
    tree.add(self._search_gadget("pop", [f"pop {reg_prefix}?[0-9a-fA-F]*;"]))
    tree.add(self._search_gadget("increment", [f"add {reg_prefix}?[0-9a-fA-F]*, 1;"]))
    tree.add(self._search_gadget("decrement", [f"sub {reg_prefix}?[0-9a-fA-F]*, 1;"]))
    tree.add(self._search_gadget("jump", eip_to_esp_strs))


def gadgetize(self):
    print(f"Searching for gadgets in {len(self.files)} files...")
    tree = Tree(f"[green]Gadgets[/green] found")
    self.add_gadgets_to_tree(tree)
    print(tree)

    if self.output:
        with open(self.output, "w") as f:
            sys.stdout = f
            print(tree)
            sys.stdout = sys.__stdout__
        print(f"Results saved to {self.output}")
def main():
    parser = argparse.ArgumentParser(description="ROPGadgetizer - Find useful gadgets in binary files")
    parser.add_argument("files", metavar="FILE", nargs="+", help="path to binary file(s)")
    parser.add_argument(
        "-b",
        "--badbytes",
        metavar="BB",
        default="",
        help="specify bad bytes for the exploit (e.g., '000a0d')",
    )
    parser.add_argument(
        "-o",
        "--output",
        metavar="FILE",
        help="save gadget list to file",
    )
    parser.add_argument(
        "-a",
        "--arch",
        metavar="ARCH",
        default="x86",
        help="specify architecture of the binary file (default: x86)",
    )
    parser.add_argument(
        "-c",
        "--color",
        metavar="BOOL",
        default=True,
        type=bool,
        help="colorize output (default: True)",
    )
    args = parser.parse_args()
    gadgetizer = Gadgetizer(args.files, args.badbytes, args.output, args.arch, args.color)
    gadgetizer.gadgetize()

if __name__ == "__main__":
    main()
